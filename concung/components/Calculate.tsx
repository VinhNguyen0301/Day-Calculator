/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/KR9hEv6bgq0
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client";

import { useState } from "react";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import {
  Popover,
  PopoverTrigger,
  PopoverContent,
} from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";

export function Calculate() {
  const [mode, setMode] = useState("expiration");
  const [expirationDate, setExpirationDate] = useState("");
  const [daysCount, setDaysCount] = useState("");
  const [calculatedDate, setCalculatedDate] = useState("");
  const handleModeChange = (mode) => {
    setMode(mode);
    setCalculatedDate("");
  };
  const handleExpirationDateChange = (e) => {
    setExpirationDate(e.target.value);
    calculateDate();
  };
  const handleDaysCountChange = (e) => {
    setDaysCount(e.target.value);
    calculateDate();
  };
  const calculateDate = () => {
    if (mode === "expiration") {
      if (daysCount) {
        const manufactureDate = new Date(
          new Date().getTime() - daysCount * 86400000
        );
        setCalculatedDate(manufactureDate.toLocaleDateString());
      }
    } else {
      if (expirationDate) {
        const manufactureDate = new Date(expirationDate);
        manufactureDate.setDate(manufactureDate.getDate() - daysCount);
        setCalculatedDate(manufactureDate.toLocaleDateString());
      }
    }
  };
  return (
    <div className="flex flex-col items-center justify-center h-screen bg-background">
      <Card className="w-full max-w-md p-6 space-y-4">
        <CardHeader>
          <CardTitle>App Tính Ngày</CardTitle>
          <CardDescription>
            Dùng để tính ngày hết hạn hoặc ngày sản xuất dựa vào số ngày biết
            trước.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center space-x-4">
            <Button
              variant={mode === "expiration" ? "default" : "outline"}
              onClick={() => handleModeChange("expiration")}
            >
              Chọn ngày hết hạn
            </Button>
            <Button
              variant={mode === "manufacture" ? "default" : "outline"}
              onClick={() => handleModeChange("manufacture")}
            >
              Chọn ngày sản xuất
            </Button>
          </div>
          <div className="grid gap-4 mt-6">
            {mode === "expiration" ? (
              <div>
                <div>
                  <Label htmlFor="expired-days">
                    Nhập ngày hết hạn dô em :v
                  </Label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant="outline"
                        className="w-full"
                        onClick={() => {
                          if (mode === "expiration" && daysCount) {
                            const manufactureDate = new Date(
                              new Date().getTime() - daysCount * 86400000
                            );
                            setCalculatedDate(
                              manufactureDate.toLocaleDateString()
                            );
                          }
                        }}
                      >
                        <CalendarDaysIcon className="mr-2 h-4 w-4" />
                        Pick Expiration Date
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="p-0">
                      <Calendar
                        mode="single"
                        selected={
                          new Date(new Date().getTime() + daysCount * 86400000)
                        }
                        onSelect={(date) => {
                          setExpirationDate(date.toISOString().slice(0, 10));
                          calculateDate();
                        }}
                      />
                    </PopoverContent>
                  </Popover>
                </div>
                <div className="grid gap-2 mt-2">
                  <Label htmlFor="days">Số ngày cần tính toán</Label>
                  <Input
                    id="days"
                    type="number"
                    placeholder="Enter days"
                    value={daysCount}
                    onChange={handleDaysCountChange}
                  />
                </div>
              </div>
            ) : (
              <div className="grid gap-2">
                <Label htmlFor="expiration">Expiration Date</Label>
                <Input
                  id="expiration"
                  type="date"
                  value={expirationDate}
                  onChange={handleExpirationDateChange}
                />
              </div>
            )}
            {calculatedDate && (
              <div className="grid gap-2">
                <Label>
                  {mode === "expiration"
                    ? "Manufacture Date"
                    : "Expiration Date"}
                </Label>
                <div className="text-2xl font-bold">{calculatedDate}</div>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

function CalendarDaysIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M8 2v4" />
      <path d="M16 2v4" />
      <rect width="18" height="18" x="3" y="4" rx="2" />
      <path d="M3 10h18" />
      <path d="M8 14h.01" />
      <path d="M12 14h.01" />
      <path d="M16 14h.01" />
      <path d="M8 18h.01" />
      <path d="M12 18h.01" />
      <path d="M16 18h.01" />
    </svg>
  );
}

function XIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  );
}
